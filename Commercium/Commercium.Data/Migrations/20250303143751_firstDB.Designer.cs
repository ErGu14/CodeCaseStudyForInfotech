// <auto-generated />
using System;
using Commercium.Data.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Commercium.Data.Migrations
{
    [DbContext(typeof(CommerciumDbContext))]
    [Migration("20250303143751_firstDB")]
    partial class firstDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Commercium.Entity.Businness.BusinessProfile", b =>
                {
                    b.Property<int>("BusinessProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessProfileId"));

                    b.Property<string>("BusinessDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClickCount")
                        .HasColumnType("int");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BusinessProfileId");

                    b.HasIndex("OwnerId");

                    b.ToTable("BusinessProfiles");

                    b.HasData(
                        new
                        {
                            BusinessProfileId = 1,
                            BusinessDescription = "En yeni teknolojik ürünleri bulabileceğiniz mağaza.",
                            BusinessName = "TechWorld",
                            ClickCount = 0,
                            ContactInfo = "techworld@business.com - 0212 123 45 67",
                            LikeCount = 0,
                            Location = "İstanbul, Türkiye",
                            OwnerId = "d04b2879-cff4-4d92-8e3f-97acdc6c0e42"
                        },
                        new
                        {
                            BusinessProfileId = 2,
                            BusinessDescription = "Kozmetik ve cilt bakım ürünleri üzerine uzmanlaşmış bir mağaza.",
                            BusinessName = "BeautyGlow",
                            ClickCount = 0,
                            ContactInfo = "beautyglow@business.com - 0216 765 43 21",
                            LikeCount = 0,
                            Location = "Ankara, Türkiye",
                            OwnerId = "d04b2879-cff4-4d92-8e3f-97acdc6c0e42"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.Businness.BusinessProfileCustomization", b =>
                {
                    b.Property<int>("BusinessProfileCustomizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessProfileCustomizationId"));

                    b.Property<int>("BusinessProfileId")
                        .HasColumnType("int");

                    b.Property<string>("CustomBackgroundImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomProfileImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusinessProfileCustomizationId");

                    b.HasIndex("BusinessProfileId");

                    b.ToTable("BusinessProfileCustomizations");

                    b.HasData(
                        new
                        {
                            BusinessProfileCustomizationId = 1,
                            BusinessProfileId = 1,
                            CustomBackgroundImage = "/images/businnesBackground.png",
                            CustomDescription = "Teknoloji severler için en yeni ürünleri sunuyoruz.",
                            CustomProfileImage = "/images/businnesProfile.png"
                        },
                        new
                        {
                            BusinessProfileCustomizationId = 2,
                            BusinessProfileId = 2,
                            CustomBackgroundImage = "/images/businnesBackground.png",
                            CustomDescription = "Cilt bakımında en kaliteli ürünleri sizin için seçiyoruz.",
                            CustomProfileImage = "/images/businnesProfile.png"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.Businness.BusinessProfileTag", b =>
                {
                    b.Property<int>("BusinessProfileId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("BusinessProfileId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("BusinessProfileTags");
                });

            modelBuilder.Entity("Commercium.Entity.Businness.Campaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CampaignId"));

                    b.Property<int>("BusinessProfileId")
                        .HasColumnType("int");

                    b.Property<int>("ClickCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("CampaignId");

                    b.HasIndex("BusinessProfileId");

                    b.ToTable("Campaigns");

                    b.HasData(
                        new
                        {
                            CampaignId = 1,
                            BusinessProfileId = 1,
                            ClickCount = 0,
                            Description = "Tüm teknolojik ürünlerde %15 indirim!",
                            DiscountPercentage = 15.00m,
                            EndDate = new DateTime(2025, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LikeCount = 0,
                            StartDate = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Bahar İndirimi",
                            ViewCount = 0
                        },
                        new
                        {
                            CampaignId = 2,
                            BusinessProfileId = 2,
                            ClickCount = 0,
                            Description = "Seçili cilt bakım ürünlerinde %20 indirim fırsatı!",
                            DiscountPercentage = 20.00m,
                            EndDate = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LikeCount = 0,
                            StartDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Cilt Bakım Günleri",
                            ViewCount = 0
                        });
                });

            modelBuilder.Entity("Commercium.Entity.Businness.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<int>("BusinessProfileId")
                        .HasColumnType("int");

                    b.Property<int>("ClickCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FavoriteId")
                        .HasColumnType("int");

                    b.Property<int?>("FavoriteId1")
                        .HasColumnType("int");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId");

                    b.HasIndex("BusinessProfileId");

                    b.HasIndex("FavoriteId1");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            BusinessProfileId = 1,
                            ClickCount = 0,
                            Description = "Her marka laptop için profesyonel teknik servis hizmeti.",
                            LikeCount = 0,
                            Price = 250.00m,
                            ServiceName = "Laptop Teknik Servisi"
                        },
                        new
                        {
                            ServiceId = 2,
                            BusinessProfileId = 1,
                            ClickCount = 0,
                            Description = "Ekran değişimi, batarya değişimi ve diğer tamir hizmetleri.",
                            LikeCount = 0,
                            Price = 150.00m,
                            ServiceName = "Telefon Tamiri"
                        },
                        new
                        {
                            ServiceId = 3,
                            BusinessProfileId = 2,
                            ClickCount = 0,
                            Description = "Cilt tipinize uygun bakım önerileri ile analiz hizmeti.",
                            LikeCount = 0,
                            Price = 100.00m,
                            ServiceName = "Cilt Analizi"
                        },
                        new
                        {
                            ServiceId = 4,
                            BusinessProfileId = 2,
                            ClickCount = 0,
                            Description = "Özel günler için profesyonel makyaj hizmeti.",
                            LikeCount = 0,
                            Price = 300.00m,
                            ServiceName = "Profesyonel Makyaj"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Teknoloji"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Bilgisayar & Tablet"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Telefon & Aksesuar"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Cilt Bakımı"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Makyaj"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("BusinessProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int>("ClickCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FavoriteId")
                        .HasColumnType("int");

                    b.Property<int?>("FavoriteId1")
                        .HasColumnType("int");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.Property<string>("imgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("BusinessProfileId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("FavoriteId1");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            BusinessProfileId = 1,
                            ClickCount = 0,
                            CreatedDate = new DateTime(2025, 3, 3, 14, 37, 50, 977, DateTimeKind.Utc).AddTicks(8776),
                            Description = "Yüksek performanslı oyuncu laptopu.",
                            LikeCount = 0,
                            Name = "Gaming Laptop",
                            Price = 25000.00m,
                            ViewCount = 0,
                            imgUrl = "/images/product.jpg"
                        },
                        new
                        {
                            ProductId = 2,
                            BusinessProfileId = 1,
                            ClickCount = 0,
                            CreatedDate = new DateTime(2025, 3, 3, 14, 37, 50, 977, DateTimeKind.Utc).AddTicks(8781),
                            Description = "Bluetooth bağlantılı yüksek ses kalitesi sunan kulaklık.",
                            LikeCount = 0,
                            Name = "Kablosuz Kulaklık",
                            Price = 1500.00m,
                            ViewCount = 0,
                            imgUrl = "/images/product.jpg"
                        },
                        new
                        {
                            ProductId = 3,
                            BusinessProfileId = 1,
                            ClickCount = 0,
                            CreatedDate = new DateTime(2025, 3, 3, 14, 37, 50, 977, DateTimeKind.Utc).AddTicks(8783),
                            Description = "Yüksek çözünürlüklü ekran ve uzun pil ömrü ile profesyonel tablet.",
                            LikeCount = 0,
                            Name = "Tablet Pro 2025",
                            Price = 12000.00m,
                            ViewCount = 0,
                            imgUrl = "/images/product.jpg"
                        },
                        new
                        {
                            ProductId = 4,
                            BusinessProfileId = 1,
                            ClickCount = 0,
                            CreatedDate = new DateTime(2025, 3, 3, 14, 37, 50, 977, DateTimeKind.Utc).AddTicks(8786),
                            Description = "RGB ışıklı, mekanik anahtarlı gaming klavye.",
                            LikeCount = 0,
                            Name = "Mekanik Klavye",
                            Price = 2500.00m,
                            ViewCount = 0,
                            imgUrl = "/images/product.jpg"
                        },
                        new
                        {
                            ProductId = 5,
                            BusinessProfileId = 1,
                            ClickCount = 0,
                            CreatedDate = new DateTime(2025, 3, 3, 14, 37, 50, 977, DateTimeKind.Utc).AddTicks(8787),
                            Description = "Üst düzey performans sunan en yeni akıllı telefon modeli.",
                            LikeCount = 0,
                            Name = "Akıllı Telefon X",
                            Price = 18000.00m,
                            ViewCount = 0,
                            imgUrl = "/images/product.jpg"
                        },
                        new
                        {
                            ProductId = 6,
                            BusinessProfileId = 1,
                            ClickCount = 0,
                            CreatedDate = new DateTime(2025, 3, 3, 14, 37, 50, 977, DateTimeKind.Utc).AddTicks(8789),
                            Description = "Dayanıklı silikon kılıf, farklı renk seçenekleriyle.",
                            LikeCount = 0,
                            Name = "Telefon Kılıfı",
                            Price = 250.00m,
                            ViewCount = 0,
                            imgUrl = "/images/product.jpg"
                        },
                        new
                        {
                            ProductId = 7,
                            BusinessProfileId = 2,
                            ClickCount = 0,
                            CreatedDate = new DateTime(2025, 3, 3, 14, 37, 50, 977, DateTimeKind.Utc).AddTicks(8790),
                            Description = "Yoğun nemlendirme sağlayan hyaluronik asit içeren serum.",
                            LikeCount = 0,
                            Name = "Hyaluronik Asit Serum",
                            Price = 500.00m,
                            ViewCount = 0,
                            imgUrl = "/images/product.jpg"
                        },
                        new
                        {
                            ProductId = 8,
                            BusinessProfileId = 2,
                            ClickCount = 0,
                            CreatedDate = new DateTime(2025, 3, 3, 14, 37, 50, 977, DateTimeKind.Utc).AddTicks(8792),
                            Description = "Yüksek koruma sağlayan güneş kremi.",
                            LikeCount = 0,
                            Name = "Güneş Koruyucu Krem SPF 50",
                            Price = 450.00m,
                            ViewCount = 0,
                            imgUrl = "/images/product.jpg"
                        },
                        new
                        {
                            ProductId = 9,
                            BusinessProfileId = 2,
                            ClickCount = 0,
                            CreatedDate = new DateTime(2025, 3, 3, 14, 37, 50, 977, DateTimeKind.Utc).AddTicks(8793),
                            Description = "Uzun süre kalıcı, mat bitişli likit ruj.",
                            LikeCount = 0,
                            Name = "Mat Likit Ruj",
                            Price = 300.00m,
                            ViewCount = 0,
                            imgUrl = "/images/product.jpg"
                        },
                        new
                        {
                            ProductId = 10,
                            BusinessProfileId = 2,
                            ClickCount = 0,
                            CreatedDate = new DateTime(2025, 3, 3, 14, 37, 50, 977, DateTimeKind.Utc).AddTicks(8795),
                            Description = "Doğal bitişli, cilt tonunu eşitleyen fondöten.",
                            LikeCount = 0,
                            Name = "Fondöten",
                            Price = 600.00m,
                            ViewCount = 0,
                            imgUrl = "/images/product.jpg"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 5
                        });
                });

            modelBuilder.Entity("Commercium.Entity.Search.SearchHistory", b =>
                {
                    b.Property<int>("SearchHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SearchHistoryId"));

                    b.Property<DateTime>("SearchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SearchQuery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SearchHistoryId");

                    b.HasIndex("UserId");

                    b.ToTable("SearchHistories");

                    b.HasData(
                        new
                        {
                            SearchHistoryId = 1,
                            SearchDate = new DateTime(2025, 2, 26, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(5777),
                            SearchQuery = "Gaming Laptop",
                            UserId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b"
                        },
                        new
                        {
                            SearchHistoryId = 2,
                            SearchDate = new DateTime(2025, 2, 28, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(5780),
                            SearchQuery = "Kablosuz Kulaklık",
                            UserId = "f8c9debe-935b-432a-b8a2-7c417f7767b1"
                        },
                        new
                        {
                            SearchHistoryId = 3,
                            SearchDate = new DateTime(2025, 3, 1, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(5781),
                            SearchQuery = "Hyaluronik Asit Serum",
                            UserId = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3"
                        },
                        new
                        {
                            SearchHistoryId = 4,
                            SearchDate = new DateTime(2025, 3, 2, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(5782),
                            SearchQuery = "Akıllı Telefon X",
                            UserId = "d04b2879-cff4-4d92-8e3f-97acdc6c0e42"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.Search.SearchResult", b =>
                {
                    b.Property<int>("SearchResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SearchResultId"));

                    b.Property<int>("BusinessProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SearchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SearchQuery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("SearchResultId");

                    b.HasIndex("BusinessProfileId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ServiceId");

                    b.ToTable("SearchResults");

                    b.HasData(
                        new
                        {
                            SearchResultId = 1,
                            BusinessProfileId = 1,
                            ProductId = 1,
                            SearchDate = new DateTime(2025, 2, 26, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(5823),
                            SearchQuery = "Gaming Laptop"
                        },
                        new
                        {
                            SearchResultId = 2,
                            BusinessProfileId = 1,
                            ProductId = 2,
                            SearchDate = new DateTime(2025, 2, 28, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(5825),
                            SearchQuery = "Kablosuz Kulaklık"
                        },
                        new
                        {
                            SearchResultId = 3,
                            BusinessProfileId = 2,
                            ProductId = 7,
                            SearchDate = new DateTime(2025, 3, 1, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(5826),
                            SearchQuery = "Hyaluronik Asit Serum"
                        },
                        new
                        {
                            SearchResultId = 4,
                            BusinessProfileId = 1,
                            ProductId = 5,
                            SearchDate = new DateTime(2025, 3, 2, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(5828),
                            SearchQuery = "Akıllı Telefon X"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.Tags.ProductTag", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            TagId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            TagId = 2
                        },
                        new
                        {
                            ProductId = 2,
                            TagId = 3
                        },
                        new
                        {
                            ProductId = 2,
                            TagId = 4
                        },
                        new
                        {
                            ProductId = 3,
                            TagId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            TagId = 5
                        },
                        new
                        {
                            ProductId = 5,
                            TagId = 6
                        },
                        new
                        {
                            ProductId = 6,
                            TagId = 7
                        },
                        new
                        {
                            ProductId = 7,
                            TagId = 8
                        },
                        new
                        {
                            ProductId = 8,
                            TagId = 9
                        },
                        new
                        {
                            ProductId = 9,
                            TagId = 10
                        },
                        new
                        {
                            ProductId = 10,
                            TagId = 11
                        });
                });

            modelBuilder.Entity("Commercium.Entity.Tags.ServiceTag", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ServiceId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ServiceTags");

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            TagId = 1
                        },
                        new
                        {
                            ServiceId = 1,
                            TagId = 2
                        },
                        new
                        {
                            ServiceId = 2,
                            TagId = 3
                        },
                        new
                        {
                            ServiceId = 2,
                            TagId = 4
                        },
                        new
                        {
                            ServiceId = 3,
                            TagId = 8
                        },
                        new
                        {
                            ServiceId = 3,
                            TagId = 9
                        },
                        new
                        {
                            ServiceId = 4,
                            TagId = 10
                        },
                        new
                        {
                            ServiceId = 4,
                            TagId = 11
                        });
                });

            modelBuilder.Entity("Commercium.Entity.Tags.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            Name = "Gaming"
                        },
                        new
                        {
                            TagId = 2,
                            Name = "Laptop"
                        },
                        new
                        {
                            TagId = 3,
                            Name = "Bluetooth"
                        },
                        new
                        {
                            TagId = 4,
                            Name = "Kulaklık"
                        },
                        new
                        {
                            TagId = 5,
                            Name = "Klavye"
                        },
                        new
                        {
                            TagId = 6,
                            Name = "Akıllı Telefon"
                        },
                        new
                        {
                            TagId = 7,
                            Name = "Aksesuar"
                        },
                        new
                        {
                            TagId = 8,
                            Name = "Cilt Bakımı"
                        },
                        new
                        {
                            TagId = 9,
                            Name = "Serum"
                        },
                        new
                        {
                            TagId = 10,
                            Name = "Makyaj"
                        },
                        new
                        {
                            TagId = 11,
                            Name = "Fondöten"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.User.Account.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1e01f984-8836-4e4b-902a-d60fa23b1833",
                            Description = "Standart kullanıcılar için bir rol.",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "d4b8c6bc-0182-4c29-8c88-8e68bc8a7b2b",
                            Description = "Satıcılar için bir rol.",
                            Name = "Seller",
                            NormalizedName = "SELLER"
                        },
                        new
                        {
                            Id = "fa5c0d5b-8b9b-4377-a2ba-d5765a8ed25c",
                            Description = "Yönetici rolü, tüm yetkilere sahip.",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ab5cd8c9-8f8e-48b2-83c1-b96e5f98413a",
                            Description = "İşletme sahipleri için bir rol.",
                            Name = "BusinessOwner",
                            NormalizedName = "BUSINESSOWNER"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.User.Account.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c841f7e-6380-40da-99c2-290ab4d51ada",
                            DateOfBirth = new DateTime(1988, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ahmetyilmaz41@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            Gender = 5,
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "AHMETYILMAZ41@OUTLOOK.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFwBGfLoDAKmlbCijLYhoOC3g9siyq3edOrHw2iV+mvHciNXp/WZoljys6jOJbg6vQ==",
                            PhoneNumber = "5346530901",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "1c06adda-d363-4ffe-be83-252715041f0f",
                            Status = 0,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "f8c9debe-935b-432a-b8a2-7c417f7767b1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5439ad4-2061-4c71-9522-0f8c77e77fba",
                            DateOfBirth = new DateTime(1992, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmetguler@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = 1,
                            LastName = "Güler",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "MEHMETGULER@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB/SuG+XD4eVLWU3BJOCoSFmaGLVMGivaSeMWib5B+wpiEvNuS6M7ydFQhBKhJ8sTw==",
                            PhoneNumber = "5551234567",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "37a533c4-fb74-40db-ae96-8201492a886e",
                            Status = 0,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e0859ef-f42d-4f8d-ad6c-3a437d75c813",
                            DateOfBirth = new DateTime(1985, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayseyilmaz@admin.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            Gender = 2,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            MiddleName = "Fidan",
                            NormalizedEmail = "AYSEYILMAZ@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK7jvqyZc7uJt+CVkWUgTHQGLttMlCqsY9x3hhsdstRotVcgob+vWDsy+AKD2w//SA==",
                            PhoneNumber = "5327654321",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "3fe5c7dd-e418-41f3-b0de-3f55705f3d83",
                            Status = 0,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "d04b2879-cff4-4d92-8e3f-97acdc6c0e42",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ba4e367-15cf-488f-8e35-fabc832a586d",
                            DateOfBirth = new DateTime(1990, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alicelik@business.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = 1,
                            LastName = "Çelik",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "ALICELIK@BUSINESS.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFl16tGXciOP49pQuQqh8tI7ds7W+Jh/4m4X9bDXKC82i2wEt9Yfqtr5Fz24a4oHCw==",
                            PhoneNumber = "5364567890",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "2d6b6e0e-201e-4bb0-a0e2-37ab363cff4c",
                            Status = 0,
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Commercium.Entity.User.ActivityLog", b =>
                {
                    b.Property<int>("ActivityLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityLogId"));

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ActivityLogId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLogs");

                    b.HasData(
                        new
                        {
                            ActivityLogId = 1,
                            ActivityDate = new DateTime(2025, 2, 26, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(4966),
                            ActivityType = 1,
                            Details = "Gaming Laptop ürününe tıklandı.",
                            EntityId = 1,
                            EntityName = "Gaming Laptop",
                            EntityType = 1,
                            ProductId = 1,
                            UserId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b"
                        },
                        new
                        {
                            ActivityLogId = 2,
                            ActivityDate = new DateTime(2025, 2, 28, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(4984),
                            ActivityType = 2,
                            Details = "Telefon Kılıfı ürünü beğenildi.",
                            EntityId = 6,
                            EntityName = "Telefon Kılıfı",
                            EntityType = 1,
                            ProductId = 6,
                            UserId = "f8c9debe-935b-432a-b8a2-7c417f7767b1"
                        },
                        new
                        {
                            ActivityLogId = 3,
                            ActivityDate = new DateTime(2025, 3, 1, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(4987),
                            ActivityType = 3,
                            Details = "Hyaluronik Asit Serum görüntülendi.",
                            EntityId = 7,
                            EntityName = "Hyaluronik Asit Serum",
                            EntityType = 1,
                            ProductId = 7,
                            UserId = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3"
                        },
                        new
                        {
                            ActivityLogId = 4,
                            ActivityDate = new DateTime(2025, 2, 21, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(4990),
                            ActivityType = 5,
                            Details = "Yeni kullanıcı kaydoldu.",
                            EntityId = 1,
                            EntityName = "Ali Çelik",
                            EntityType = 6,
                            UserId = "d04b2879-cff4-4d92-8e3f-97acdc6c0e42"
                        },
                        new
                        {
                            ActivityLogId = 5,
                            ActivityDate = new DateTime(2025, 3, 2, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(4992),
                            ActivityType = 4,
                            Details = "Ahmet Yıldız giriş yaptı.",
                            EntityId = 1,
                            EntityName = "Ahmet Yıldız",
                            EntityType = 6,
                            UserId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.User.Conversation", b =>
                {
                    b.Property<int>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConversationId"));

                    b.Property<DateTime>("LastMessageDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ConversationId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Conversations");

                    b.HasData(
                        new
                        {
                            ConversationId = 1,
                            LastMessageDate = new DateTime(2025, 3, 2, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(5055),
                            ReceiverId = "f8c9debe-935b-432a-b8a2-7c417f7767b1",
                            SenderId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b"
                        },
                        new
                        {
                            ConversationId = 2,
                            LastMessageDate = new DateTime(2025, 3, 1, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(5058),
                            ReceiverId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b",
                            SenderId = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3"
                        },
                        new
                        {
                            ConversationId = 3,
                            LastMessageDate = new DateTime(2025, 2, 28, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(5059),
                            ReceiverId = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3",
                            SenderId = "f8c9debe-935b-432a-b8a2-7c417f7767b1"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.User.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteId"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FavoriteId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");

                    b.HasData(
                        new
                        {
                            FavoriteId = 1,
                            ProductId = 1,
                            UserId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b"
                        },
                        new
                        {
                            FavoriteId = 2,
                            ProductId = 2,
                            UserId = "f8c9debe-935b-432a-b8a2-7c417f7767b1"
                        },
                        new
                        {
                            FavoriteId = 3,
                            ProductId = 7,
                            UserId = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3"
                        },
                        new
                        {
                            FavoriteId = 4,
                            ProductId = 5,
                            UserId = "d04b2879-cff4-4d92-8e3f-97acdc6c0e42"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.User.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            MessageId = 1,
                            Content = "Merhaba, Gaming Laptop hakkında daha fazla bilgi alabilir miyim?",
                            ConversationId = 1,
                            FileUrl = "/images/product.jpg",
                            IsRead = false,
                            ReceiverId = "f8c9debe-935b-432a-b8a2-7c417f7767b1",
                            SenderId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b",
                            SentDate = new DateTime(2025, 3, 1, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(5146)
                        },
                        new
                        {
                            MessageId = 2,
                            Content = "Tabii, Gaming Laptop hakkında her türlü bilgiyi verebilirim. Hangi özelliklere bakıyorsunuz?",
                            ConversationId = 1,
                            FileUrl = "/images/product.jpg",
                            IsRead = false,
                            ReceiverId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b",
                            SenderId = "f8c9debe-935b-432a-b8a2-7c417f7767b1",
                            SentDate = new DateTime(2025, 3, 2, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(5150)
                        },
                        new
                        {
                            MessageId = 3,
                            Content = "Merhaba Ahmet, cilt bakım ürünlerimiz hakkında bilgi almak ister misiniz?",
                            ConversationId = 2,
                            IsRead = true,
                            ReceiverId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b",
                            SenderId = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3",
                            SentDate = new DateTime(2025, 2, 28, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(5152)
                        },
                        new
                        {
                            MessageId = 4,
                            Content = "Evet, ilgileniyorum. Hangi ürünleri önerirsiniz?",
                            ConversationId = 2,
                            IsRead = false,
                            ReceiverId = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3",
                            SenderId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b",
                            SentDate = new DateTime(2025, 3, 1, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(5154)
                        },
                        new
                        {
                            MessageId = 5,
                            Content = "Merhaba Ayşe, telefon kılıfını almak istiyorum, hangi renkleri önerirsin?",
                            ConversationId = 3,
                            FileUrl = "/images/product.jpg",
                            IsRead = false,
                            ReceiverId = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3",
                            SenderId = "f8c9debe-935b-432a-b8a2-7c417f7767b1",
                            SentDate = new DateTime(2025, 3, 2, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(5156)
                        });
                });

            modelBuilder.Entity("Commercium.Entity.User.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int?>("BusinessProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotificationId");

                    b.HasIndex("BusinessProfileId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            NotificationId = 1,
                            DateCreated = new DateTime(2025, 3, 1, 17, 37, 51, 228, DateTimeKind.Local).AddTicks(5194),
                            IsRead = false,
                            Message = "Ürünün beğenildi.",
                            NotificationType = 1,
                            ProductId = 1,
                            UserId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b"
                        },
                        new
                        {
                            NotificationId = 2,
                            DateCreated = new DateTime(2025, 3, 2, 17, 37, 51, 228, DateTimeKind.Local).AddTicks(5212),
                            IsRead = true,
                            Message = "Ürüne yorum yapıldı.",
                            NotificationType = 2,
                            ProductId = 2,
                            UserId = "f8c9debe-935b-432a-b8a2-7c417f7767b1"
                        },
                        new
                        {
                            NotificationId = 3,
                            BusinessProfileId = 1,
                            DateCreated = new DateTime(2025, 2, 28, 17, 37, 51, 228, DateTimeKind.Local).AddTicks(5214),
                            IsRead = false,
                            Message = "Kampanya güncellendi.",
                            NotificationType = 3,
                            UserId = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3"
                        },
                        new
                        {
                            NotificationId = 4,
                            DateCreated = new DateTime(2025, 3, 2, 17, 37, 51, 228, DateTimeKind.Local).AddTicks(5217),
                            IsRead = true,
                            Message = "Yeni mesajınız var.",
                            NotificationType = 4,
                            UserId = "d04b2879-cff4-4d92-8e3f-97acdc6c0e42"
                        },
                        new
                        {
                            NotificationId = 5,
                            DateCreated = new DateTime(2025, 2, 26, 17, 37, 51, 228, DateTimeKind.Local).AddTicks(5219),
                            IsRead = false,
                            Message = "Profiliniz güncellendi.",
                            NotificationType = 5,
                            UserId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.User.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReviewId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            Comment = "Gaming Laptop gerçekten harika, yüksek performans ve uzun pil ömrü ile çok beğendim!",
                            DateCreated = new DateTime(2025, 2, 26, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(5312),
                            ProductId = 1,
                            Rating = 5,
                            UserId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b"
                        },
                        new
                        {
                            ReviewId = 2,
                            Comment = "Kablosuz Kulaklık güzel ama biraz daha ses yalıtımı olabilirdi.",
                            DateCreated = new DateTime(2025, 2, 27, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(5317),
                            ProductId = 2,
                            Rating = 4,
                            UserId = "f8c9debe-935b-432a-b8a2-7c417f7767b1"
                        },
                        new
                        {
                            ReviewId = 3,
                            Comment = "Tablet Pro 2025 fena değil ancak ekranı biraz daha parlak olabilirdi.",
                            DateCreated = new DateTime(2025, 2, 28, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(5318),
                            ProductId = 3,
                            Rating = 3,
                            UserId = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3"
                        },
                        new
                        {
                            ReviewId = 4,
                            Comment = "Telefon Kılıfı çok sağlam ve şık. Telefonu koruma konusunda çok başarılı.",
                            DateCreated = new DateTime(2025, 3, 1, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(5320),
                            ProductId = 6,
                            Rating = 5,
                            UserId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b"
                        },
                        new
                        {
                            ReviewId = 5,
                            Comment = "Cilt bakımında gerçekten iyi sonuçlar aldım, fakat biraz daha nemlendirici olabilir.",
                            DateCreated = new DateTime(2025, 3, 2, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(5322),
                            ProductId = 7,
                            Rating = 4,
                            UserId = "f8c9debe-935b-432a-b8a2-7c417f7767b1"
                        },
                        new
                        {
                            ReviewId = 6,
                            Comment = "Makyaj seti beklediğimi vermedi. Kalıcılığı çok düşük.",
                            DateCreated = new DateTime(2025, 2, 24, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(5323),
                            ProductId = 9,
                            Rating = 2,
                            UserId = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3"
                        },
                        new
                        {
                            ReviewId = 7,
                            Comment = "Hyaluronik Asit Serum mükemmel. Cildim çok daha parlak ve nemli oldu.",
                            DateCreated = new DateTime(2025, 2, 25, 14, 37, 51, 228, DateTimeKind.Utc).AddTicks(5374),
                            ProductId = 7,
                            Rating = 5,
                            UserId = "d04b2879-cff4-4d92-8e3f-97acdc6c0e42"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.User.UserFollow", b =>
                {
                    b.Property<string>("FollowerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FollowedId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FollowerId", "FollowedId");

                    b.HasIndex("FollowedId");

                    b.ToTable("UserFollows");

                    b.HasData(
                        new
                        {
                            FollowerId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b",
                            FollowedId = "f8c9debe-935b-432a-b8a2-7c417f7767b1"
                        },
                        new
                        {
                            FollowerId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b",
                            FollowedId = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3"
                        },
                        new
                        {
                            FollowerId = "f8c9debe-935b-432a-b8a2-7c417f7767b1",
                            FollowedId = "d04b2879-cff4-4d92-8e3f-97acdc6c0e42"
                        },
                        new
                        {
                            FollowerId = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3",
                            FollowedId = "f8c9debe-935b-432a-b8a2-7c417f7767b1"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.User.UserProfileCustomization", b =>
                {
                    b.Property<int>("UserProfileCustomizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserProfileCustomizationId"));

                    b.Property<string>("CustomBackgroundImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomProfileImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserProfileCustomizationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfileCustomizations");

                    b.HasData(
                        new
                        {
                            UserProfileCustomizationId = 1,
                            CustomBackgroundImage = "/images/businnesBackground.png",
                            CustomDescription = "Kişisel teknoloji meraklısı, oyun bilgisayarları ve aksesuarları hakkında bilgi sahibi.",
                            CustomProfileImage = "/images/user1.jpg",
                            UserId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b"
                        },
                        new
                        {
                            UserProfileCustomizationId = 2,
                            CustomBackgroundImage = "/images/businnesBackground.png",
                            CustomDescription = "Satış uzmanı, kulaklıklar ve telefon aksesuarları konusunda uzman.",
                            CustomProfileImage = "/images/user2.jpg",
                            UserId = "f8c9debe-935b-432a-b8a2-7c417f7767b1"
                        },
                        new
                        {
                            UserProfileCustomizationId = 3,
                            CustomBackgroundImage = "/images/businnesBackground.png",
                            CustomDescription = "Cilt bakımına meraklı, makyaj ürünleri ve kişisel bakım konusunda bilgi sahibiyim.",
                            CustomProfileImage = "/images/user4.jpg",
                            UserId = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3"
                        },
                        new
                        {
                            UserProfileCustomizationId = 4,
                            CustomBackgroundImage = "/images/businnesBackground.png",
                            CustomDescription = "İşletme sahibi, teknoloji ürünleri ve kişisel bakım ürünleri satışı yapıyorum.",
                            CustomProfileImage = "/images/user3.jpg",
                            UserId = "d04b2879-cff4-4d92-8e3f-97acdc6c0e42"
                        });
                });

            modelBuilder.Entity("ConversationMessage", b =>
                {
                    b.Property<int>("ConversationsConversationId")
                        .HasColumnType("int");

                    b.Property<int>("MessagesMessageId")
                        .HasColumnType("int");

                    b.HasKey("ConversationsConversationId", "MessagesMessageId");

                    b.HasIndex("MessagesMessageId");

                    b.ToTable("ConversationMessage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b",
                            RoleId = "1e01f984-8836-4e4b-902a-d60fa23b1833"
                        },
                        new
                        {
                            UserId = "f8c9debe-935b-432a-b8a2-7c417f7767b1",
                            RoleId = "d4b8c6bc-0182-4c29-8c88-8e68bc8a7b2b"
                        },
                        new
                        {
                            UserId = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3",
                            RoleId = "fa5c0d5b-8b9b-4377-a2ba-d5765a8ed25c"
                        },
                        new
                        {
                            UserId = "d04b2879-cff4-4d92-8e3f-97acdc6c0e42",
                            RoleId = "ab5cd8c9-8f8e-48b2-83c1-b96e5f98413a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Commercium.Entity.Businness.BusinessProfile", b =>
                {
                    b.HasOne("Commercium.Entity.User.Account.AppUser", "Owner")
                        .WithMany("BusinessProfiles")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Commercium.Entity.Businness.BusinessProfileCustomization", b =>
                {
                    b.HasOne("Commercium.Entity.Businness.BusinessProfile", "BusinessProfile")
                        .WithMany()
                        .HasForeignKey("BusinessProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessProfile");
                });

            modelBuilder.Entity("Commercium.Entity.Businness.BusinessProfileTag", b =>
                {
                    b.HasOne("Commercium.Entity.Businness.BusinessProfile", "BusinessProfile")
                        .WithMany("BusinessProfileTags")
                        .HasForeignKey("BusinessProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commercium.Entity.Tags.Tag", "Tag")
                        .WithMany("BusinessProfileTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessProfile");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Commercium.Entity.Businness.Campaign", b =>
                {
                    b.HasOne("Commercium.Entity.Businness.BusinessProfile", "BusinessProfile")
                        .WithMany()
                        .HasForeignKey("BusinessProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessProfile");
                });

            modelBuilder.Entity("Commercium.Entity.Businness.Service", b =>
                {
                    b.HasOne("Commercium.Entity.Businness.BusinessProfile", "BusinessProfile")
                        .WithMany("Services")
                        .HasForeignKey("BusinessProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commercium.Entity.User.Favorite", "Favorite")
                        .WithMany()
                        .HasForeignKey("FavoriteId1");

                    b.Navigation("BusinessProfile");

                    b.Navigation("Favorite");
                });

            modelBuilder.Entity("Commercium.Entity.Product", b =>
                {
                    b.HasOne("Commercium.Entity.Businness.BusinessProfile", "BusinessProfile")
                        .WithMany("Products")
                        .HasForeignKey("BusinessProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commercium.Entity.Businness.Campaign", null)
                        .WithMany("Products")
                        .HasForeignKey("CampaignId");

                    b.HasOne("Commercium.Entity.User.Favorite", "Favorite")
                        .WithMany()
                        .HasForeignKey("FavoriteId1");

                    b.Navigation("BusinessProfile");

                    b.Navigation("Favorite");
                });

            modelBuilder.Entity("Commercium.Entity.ProductCategory", b =>
                {
                    b.HasOne("Commercium.Entity.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commercium.Entity.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Commercium.Entity.Search.SearchHistory", b =>
                {
                    b.HasOne("Commercium.Entity.User.Account.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Commercium.Entity.Search.SearchResult", b =>
                {
                    b.HasOne("Commercium.Entity.Businness.BusinessProfile", "BusinessProfile")
                        .WithMany()
                        .HasForeignKey("BusinessProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commercium.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Commercium.Entity.Businness.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.Navigation("BusinessProfile");

                    b.Navigation("Product");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Commercium.Entity.Tags.ProductTag", b =>
                {
                    b.HasOne("Commercium.Entity.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commercium.Entity.Tags.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Commercium.Entity.Tags.ServiceTag", b =>
                {
                    b.HasOne("Commercium.Entity.Businness.Service", "Service")
                        .WithMany("ServiceTags")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commercium.Entity.Tags.Tag", "Tag")
                        .WithMany("ServiceTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Commercium.Entity.User.ActivityLog", b =>
                {
                    b.HasOne("Commercium.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Commercium.Entity.Businness.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Commercium.Entity.User.Account.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Commercium.Entity.User.Conversation", b =>
                {
                    b.HasOne("Commercium.Entity.User.Account.AppUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Commercium.Entity.User.Account.AppUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Commercium.Entity.User.Favorite", b =>
                {
                    b.HasOne("Commercium.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Commercium.Entity.Businness.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Commercium.Entity.User.Account.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Commercium.Entity.User.Message", b =>
                {
                    b.HasOne("Commercium.Entity.User.Account.AppUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Commercium.Entity.User.Account.AppUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Commercium.Entity.User.Notification", b =>
                {
                    b.HasOne("Commercium.Entity.Businness.BusinessProfile", "BusinessProfile")
                        .WithMany("Notifications")
                        .HasForeignKey("BusinessProfileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Commercium.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Commercium.Entity.Businness.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("Commercium.Entity.User.Account.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessProfile");

                    b.Navigation("Product");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Commercium.Entity.User.Review", b =>
                {
                    b.HasOne("Commercium.Entity.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId");

                    b.HasOne("Commercium.Entity.Businness.Service", "Service")
                        .WithMany("Reviews")
                        .HasForeignKey("ServiceId");

                    b.HasOne("Commercium.Entity.User.Account.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Commercium.Entity.User.UserFollow", b =>
                {
                    b.HasOne("Commercium.Entity.User.Account.AppUser", "Followed")
                        .WithMany("FollowedBy")
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Commercium.Entity.User.Account.AppUser", "Follower")
                        .WithMany("Follows")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Commercium.Entity.User.UserProfileCustomization", b =>
                {
                    b.HasOne("Commercium.Entity.User.Account.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConversationMessage", b =>
                {
                    b.HasOne("Commercium.Entity.User.Conversation", null)
                        .WithMany()
                        .HasForeignKey("ConversationsConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commercium.Entity.User.Message", null)
                        .WithMany()
                        .HasForeignKey("MessagesMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Commercium.Entity.User.Account.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Commercium.Entity.User.Account.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Commercium.Entity.User.Account.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Commercium.Entity.User.Account.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commercium.Entity.User.Account.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Commercium.Entity.User.Account.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Commercium.Entity.Businness.BusinessProfile", b =>
                {
                    b.Navigation("BusinessProfileTags");

                    b.Navigation("Notifications");

                    b.Navigation("Products");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Commercium.Entity.Businness.Campaign", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Commercium.Entity.Businness.Service", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("ServiceTags");
                });

            modelBuilder.Entity("Commercium.Entity.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Commercium.Entity.Product", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("ProductTags");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Commercium.Entity.Tags.Tag", b =>
                {
                    b.Navigation("BusinessProfileTags");

                    b.Navigation("ProductTags");

                    b.Navigation("ServiceTags");
                });

            modelBuilder.Entity("Commercium.Entity.User.Account.AppUser", b =>
                {
                    b.Navigation("BusinessProfiles");

                    b.Navigation("FollowedBy");

                    b.Navigation("Follows");
                });
#pragma warning restore 612, 618
        }
    }
}
