// <auto-generated />
using System;
using Commercium.Data.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Commercium.Data.Migrations
{
    [DbContext(typeof(CommerciumDbContext))]
    [Migration("20250226111032_mig-01")]
    partial class mig01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Commercium.Entity.Businness.BusinessProfile", b =>
                {
                    b.Property<int>("BusinessProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessProfileId"));

                    b.Property<string>("BusinessDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClickCount")
                        .HasColumnType("int");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BusinessProfileId");

                    b.HasIndex("OwnerId");

                    b.ToTable("BusinessProfiles");

                    b.HasData(
                        new
                        {
                            BusinessProfileId = 1,
                            BusinessDescription = "Yüksek kaliteli elektronik ürünler.",
                            BusinessName = "Ahmet'in Teknoloji Mağazası",
                            ClickCount = 150,
                            ContactInfo = "info@ahmetteknoloji.com",
                            LikeCount = 50,
                            Location = "İstanbul, Kadıköy",
                            OwnerId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b"
                        },
                        new
                        {
                            BusinessProfileId = 2,
                            BusinessDescription = "Son trendlere uygun giyim ve aksesuarlar.",
                            BusinessName = "Mehmet'in Moda Mağazası",
                            ClickCount = 100,
                            ContactInfo = "info@mehmetmoda.com",
                            LikeCount = 30,
                            Location = "Ankara, Çankaya",
                            OwnerId = "f8c9debe-935b-432a-b8a2-7c417f7767b1"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.Businness.BusinessProfileCustomization", b =>
                {
                    b.Property<int>("BusinessProfileCustomizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessProfileCustomizationId"));

                    b.Property<int>("BusinessProfileId")
                        .HasColumnType("int");

                    b.Property<string>("CustomBackgroundImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomProfileImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusinessProfileCustomizationId");

                    b.HasIndex("BusinessProfileId");

                    b.ToTable("BusinessProfileCustomizations");

                    b.HasData(
                        new
                        {
                            BusinessProfileCustomizationId = 1,
                            BusinessProfileId = 1,
                            CustomBackgroundImage = "https://example.com/businessbackground1.jpg",
                            CustomDescription = "Ahmet'in teknoloji mağazası için özel açıklama.",
                            CustomProfileImage = "https://example.com/businessprofile1.jpg"
                        },
                        new
                        {
                            BusinessProfileCustomizationId = 2,
                            BusinessProfileId = 2,
                            CustomBackgroundImage = "https://example.com/businessbackground2.jpg",
                            CustomDescription = "Mehmet'in moda mağazası için özelleştirilmiş profil.",
                            CustomProfileImage = "https://example.com/businessprofile2.jpg"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.Businness.BusinessProfileTag", b =>
                {
                    b.Property<int>("BusinessProfileId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("BusinessProfileId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("BusinessProfileTags");

                    b.HasData(
                        new
                        {
                            BusinessProfileId = 1,
                            TagId = 1
                        },
                        new
                        {
                            BusinessProfileId = 1,
                            TagId = 2
                        },
                        new
                        {
                            BusinessProfileId = 2,
                            TagId = 3
                        },
                        new
                        {
                            BusinessProfileId = 2,
                            TagId = 4
                        });
                });

            modelBuilder.Entity("Commercium.Entity.Businness.Campaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CampaignId"));

                    b.Property<int>("BusinessProfileId")
                        .HasColumnType("int");

                    b.Property<int>("ClickCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("CampaignId");

                    b.HasIndex("BusinessProfileId");

                    b.ToTable("Campaigns");

                    b.HasData(
                        new
                        {
                            CampaignId = 1,
                            BusinessProfileId = 1,
                            ClickCount = 150,
                            Description = "Yaz aylarına özel %20 indirim fırsatı!",
                            DiscountPercentage = 20m,
                            EndDate = new DateTime(2025, 3, 8, 14, 10, 29, 345, DateTimeKind.Local).AddTicks(8681),
                            LikeCount = 50,
                            StartDate = new DateTime(2025, 2, 21, 14, 10, 29, 345, DateTimeKind.Local).AddTicks(8678),
                            Title = "Yaz İndirimi",
                            ViewCount = 200
                        },
                        new
                        {
                            CampaignId = 2,
                            BusinessProfileId = 2,
                            ClickCount = 100,
                            Description = "Kış sezonu için %15 indirim fırsatları!",
                            DiscountPercentage = 15m,
                            EndDate = new DateTime(2025, 3, 13, 14, 10, 29, 345, DateTimeKind.Local).AddTicks(8699),
                            LikeCount = 30,
                            StartDate = new DateTime(2025, 2, 24, 14, 10, 29, 345, DateTimeKind.Local).AddTicks(8697),
                            Title = "Kış İndirimi",
                            ViewCount = 180
                        });
                });

            modelBuilder.Entity("Commercium.Entity.Businness.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<int>("BusinessProfileId")
                        .HasColumnType("int");

                    b.Property<int>("ClickCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FavoriteId")
                        .HasColumnType("int");

                    b.Property<int?>("FavoriteId1")
                        .HasColumnType("int");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId");

                    b.HasIndex("BusinessProfileId");

                    b.HasIndex("FavoriteId1");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            BusinessProfileId = 1,
                            ClickCount = 150,
                            Description = "Profesyonel web tasarım hizmetleri sunuyoruz.",
                            LikeCount = 80,
                            Price = 500m,
                            ServiceName = "Web Tasarım Hizmeti"
                        },
                        new
                        {
                            ServiceId = 2,
                            BusinessProfileId = 2,
                            ClickCount = 200,
                            Description = "Web sitenizin SEO analizini yapıyoruz ve iyileştiriyoruz.",
                            LikeCount = 120,
                            Price = 300m,
                            ServiceName = "SEO Hizmeti"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Elektronik"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Moda"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Ev & Yaşam"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("BusinessProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int>("ClickCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FavoriteId")
                        .HasColumnType("int");

                    b.Property<int?>("FavoriteId1")
                        .HasColumnType("int");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("BusinessProfileId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("FavoriteId1");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 101,
                            BusinessProfileId = 1,
                            ClickCount = 150,
                            CreatedDate = new DateTime(2025, 2, 16, 14, 10, 28, 786, DateTimeKind.Local).AddTicks(5697),
                            Description = "Yüksek kaliteli elektronik ürün.",
                            LikeCount = 80,
                            Name = "Ürün A",
                            Price = 500m,
                            ViewCount = 200
                        },
                        new
                        {
                            ProductId = 102,
                            BusinessProfileId = 1,
                            ClickCount = 200,
                            CreatedDate = new DateTime(2025, 2, 21, 14, 10, 28, 786, DateTimeKind.Local).AddTicks(5790),
                            Description = "Modern teknoloji ile üretilmiş ürün.",
                            LikeCount = 120,
                            Name = "Ürün B",
                            Price = 750m,
                            ViewCount = 250
                        },
                        new
                        {
                            ProductId = 103,
                            BusinessProfileId = 2,
                            ClickCount = 110,
                            CreatedDate = new DateTime(2025, 2, 19, 14, 10, 28, 786, DateTimeKind.Local).AddTicks(5812),
                            Description = "Yeni nesil moda ürünü.",
                            LikeCount = 50,
                            Name = "Ürün C",
                            Price = 600m,
                            ViewCount = 100
                        });
                });

            modelBuilder.Entity("Commercium.Entity.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            ProductId = 101,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 102,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 103,
                            CategoryId = 2
                        });
                });

            modelBuilder.Entity("Commercium.Entity.Search.SearchHistory", b =>
                {
                    b.Property<int>("SearchHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SearchHistoryId"));

                    b.Property<DateTime>("SearchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SearchQuery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SearchHistoryId");

                    b.HasIndex("UserId");

                    b.ToTable("SearchHistories");

                    b.HasData(
                        new
                        {
                            SearchHistoryId = 1,
                            SearchDate = new DateTime(2025, 2, 24, 14, 10, 29, 345, DateTimeKind.Local).AddTicks(8937),
                            SearchQuery = "Elektronik ürünler",
                            UserId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b"
                        },
                        new
                        {
                            SearchHistoryId = 2,
                            SearchDate = new DateTime(2025, 2, 25, 14, 10, 29, 345, DateTimeKind.Local).AddTicks(8940),
                            SearchQuery = "Moda ürünleri",
                            UserId = "f8c9debe-935b-432a-b8a2-7c417f7767b1"
                        },
                        new
                        {
                            SearchHistoryId = 3,
                            SearchDate = new DateTime(2025, 2, 23, 14, 10, 29, 345, DateTimeKind.Local).AddTicks(8942),
                            SearchQuery = "SEO hizmeti",
                            UserId = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3"
                        },
                        new
                        {
                            SearchHistoryId = 4,
                            SearchDate = new DateTime(2025, 2, 25, 14, 10, 29, 345, DateTimeKind.Local).AddTicks(8944),
                            SearchQuery = "Ev & Yaşam ürünleri",
                            UserId = "d04b2879-cff4-4d92-8e3f-97acdc6c0e42"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.Search.SearchResult", b =>
                {
                    b.Property<int>("SearchResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SearchResultId"));

                    b.Property<int>("BusinessProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SearchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SearchQuery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("SearchResultId");

                    b.HasIndex("BusinessProfileId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ServiceId");

                    b.ToTable("SearchResults");

                    b.HasData(
                        new
                        {
                            SearchResultId = 1,
                            BusinessProfileId = 1,
                            ProductId = 101,
                            SearchDate = new DateTime(2025, 2, 24, 14, 10, 29, 345, DateTimeKind.Local).AddTicks(9002),
                            SearchQuery = "Elektronik ürünler"
                        },
                        new
                        {
                            SearchResultId = 2,
                            BusinessProfileId = 2,
                            ProductId = 102,
                            SearchDate = new DateTime(2025, 2, 25, 14, 10, 29, 345, DateTimeKind.Local).AddTicks(9006),
                            SearchQuery = "Moda ürünleri"
                        },
                        new
                        {
                            SearchResultId = 3,
                            BusinessProfileId = 1,
                            SearchDate = new DateTime(2025, 2, 23, 14, 10, 29, 345, DateTimeKind.Local).AddTicks(9009),
                            SearchQuery = "SEO hizmeti",
                            ServiceId = 2
                        });
                });

            modelBuilder.Entity("Commercium.Entity.Tags.ProductTag", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags");

                    b.HasData(
                        new
                        {
                            ProductId = 101,
                            TagId = 1
                        },
                        new
                        {
                            ProductId = 102,
                            TagId = 1
                        },
                        new
                        {
                            ProductId = 103,
                            TagId = 2
                        });
                });

            modelBuilder.Entity("Commercium.Entity.Tags.ServiceTag", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ServiceId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ServiceTags");

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            TagId = 1
                        },
                        new
                        {
                            ServiceId = 2,
                            TagId = 2
                        });
                });

            modelBuilder.Entity("Commercium.Entity.Tags.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            Name = "Elektronik"
                        },
                        new
                        {
                            TagId = 2,
                            Name = "Moda"
                        },
                        new
                        {
                            TagId = 3,
                            Name = "Web Tasarım"
                        },
                        new
                        {
                            TagId = 4,
                            Name = "SEO"
                        },
                        new
                        {
                            TagId = 5,
                            Name = "Yeni Ürün"
                        },
                        new
                        {
                            TagId = 6,
                            Name = "Teknoloji"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.User.Account.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1e01f984-8836-4e4b-902a-d60fa23b1833",
                            Description = "Standart kullanıcılar için bir rol.",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "d4b8c6bc-0182-4c29-8c88-8e68bc8a7b2b",
                            Description = "Satıcılar için bir rol.",
                            Name = "Seller",
                            NormalizedName = "SELLER"
                        },
                        new
                        {
                            Id = "fa5c0d5b-8b9b-4377-a2ba-d5765a8ed25c",
                            Description = "Yönetici rolü, tüm yetkilere sahip.",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ab5cd8c9-8f8e-48b2-83c1-b96e5f98413a",
                            Description = "İşletme sahipleri için bir rol.",
                            Name = "BusinessOwner",
                            NormalizedName = "BUSINESSOWNER"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.User.Account.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97a8fc12-481f-49b6-943e-0bef6f72985d",
                            DateOfBirth = new DateTime(1988, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ahmetyilmaz41@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            Gender = 5,
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "AHMETYILMAZ41@OUTLOOK.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPKcpnu+7waPUjkR7kBaXUTm5QKJ3QHMVF01HGeGf144fF6F3dw5XqN0rtHiEKm6CA==",
                            PhoneNumber = "5346530901",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "22f4d212-ab21-4bbb-9ce9-63de6e1d7e86",
                            Status = 0,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "f8c9debe-935b-432a-b8a2-7c417f7767b1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b975cd03-dc05-4559-87cf-f7c9a9b2a2e0",
                            DateOfBirth = new DateTime(1992, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmetguler@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = 1,
                            LastName = "Güler",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "MEHMETGULER@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEITo5dzT8SY8Y648tAxM+OL2XQdjoF7WkgNqP4YmehK6kib/EiWiBhk8X/tzDwllOg==",
                            PhoneNumber = "5551234567",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "9d3a66eb-80e1-4aca-a13c-9a72afd2631a",
                            Status = 0,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9611949c-27f6-4c13-ab21-10da999d594d",
                            DateOfBirth = new DateTime(1985, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayseyilmaz@admin.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            Gender = 2,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            MiddleName = "Fidan",
                            NormalizedEmail = "AYSEYILMAZ@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB+QCp+CjbQ84A8ic/xaYdB242Swv7rS8aKJ10z7ojmK8xe5F7MZzwcGV9NJ/isBwg==",
                            PhoneNumber = "5327654321",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "5204ae65-4cd1-4425-bbaf-1575db4fd36c",
                            Status = 0,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "d04b2879-cff4-4d92-8e3f-97acdc6c0e42",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a275a1ab-3426-405c-acfc-0e3955173d7b",
                            DateOfBirth = new DateTime(1990, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alicelik@business.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = 1,
                            LastName = "Çelik",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "ALICELIK@BUSINESS.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGDJIilS+GtfP37h97SBObqSL6zcSTqEK/26Y/uB4lzZOURdw1S+Z0nn4D1yJH1kxw==",
                            PhoneNumber = "5364567890",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "7cbe3754-da72-48de-a465-1178a775296c",
                            Status = 0,
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Commercium.Entity.User.ActivityLog", b =>
                {
                    b.Property<int>("ActivityLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityLogId"));

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ActivityLogId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLogs");

                    b.HasData(
                        new
                        {
                            ActivityLogId = 1,
                            ActivityDate = new DateTime(2025, 2, 26, 14, 10, 29, 345, DateTimeKind.Local).AddTicks(7382),
                            ActivityType = 3,
                            Details = "Service viewed",
                            EntityId = 1,
                            EntityName = "Web Design Service",
                            EntityType = 2,
                            ServiceId = 1,
                            UserId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.User.Conversation", b =>
                {
                    b.Property<int>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConversationId"));

                    b.Property<DateTime>("LastMessageDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ConversationId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Conversations");

                    b.HasData(
                        new
                        {
                            ConversationId = 1,
                            LastMessageDate = new DateTime(2025, 2, 24, 14, 10, 29, 345, DateTimeKind.Local).AddTicks(7516),
                            ReceiverId = "f8c9debe-935b-432a-b8a2-7c417f7767b1",
                            SenderId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b"
                        },
                        new
                        {
                            ConversationId = 2,
                            LastMessageDate = new DateTime(2025, 2, 25, 14, 10, 29, 345, DateTimeKind.Local).AddTicks(7543),
                            ReceiverId = "d04b2879-cff4-4d92-8e3f-97acdc6c0e42",
                            SenderId = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.User.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteId"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FavoriteId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");

                    b.HasData(
                        new
                        {
                            FavoriteId = 1,
                            ProductId = 101,
                            UserId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b"
                        },
                        new
                        {
                            FavoriteId = 2,
                            ServiceId = 1,
                            UserId = "f8c9debe-935b-432a-b8a2-7c417f7767b1"
                        },
                        new
                        {
                            FavoriteId = 3,
                            ProductId = 102,
                            ServiceId = 2,
                            UserId = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3"
                        },
                        new
                        {
                            FavoriteId = 4,
                            ServiceId = 2,
                            UserId = "d04b2879-cff4-4d92-8e3f-97acdc6c0e42"
                        },
                        new
                        {
                            FavoriteId = 5,
                            ProductId = 103,
                            UserId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.User.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            MessageId = 1,
                            Content = "Merhaba, nasıl yardımcı olabilirim?",
                            ConversationId = 1,
                            IsRead = false,
                            ReceiverId = "f8c9debe-935b-432a-b8a2-7c417f7767b1",
                            SenderId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b",
                            SentDate = new DateTime(2025, 2, 24, 14, 10, 29, 345, DateTimeKind.Local).AddTicks(7746)
                        },
                        new
                        {
                            MessageId = 2,
                            Content = "Merhaba! Ürün hakkında bilgi almak istiyorum.",
                            ConversationId = 1,
                            IsRead = true,
                            ReceiverId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b",
                            SenderId = "f8c9debe-935b-432a-b8a2-7c417f7767b1",
                            SentDate = new DateTime(2025, 2, 24, 14, 10, 29, 345, DateTimeKind.Local).AddTicks(7755)
                        });
                });

            modelBuilder.Entity("Commercium.Entity.User.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int?>("BusinessProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotificationId");

                    b.HasIndex("BusinessProfileId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            NotificationId = 1,
                            DateCreated = new DateTime(2025, 2, 24, 14, 10, 29, 345, DateTimeKind.Local).AddTicks(7862),
                            IsRead = false,
                            Message = "Ürünün beğenildi.",
                            NotificationType = 1,
                            ProductId = 101,
                            UserId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b"
                        },
                        new
                        {
                            NotificationId = 2,
                            DateCreated = new DateTime(2025, 2, 25, 14, 10, 29, 345, DateTimeKind.Local).AddTicks(7871),
                            IsRead = true,
                            Message = "Ürüne yorum yapıldı.",
                            NotificationType = 2,
                            ProductId = 102,
                            UserId = "f8c9debe-935b-432a-b8a2-7c417f7767b1"
                        },
                        new
                        {
                            NotificationId = 3,
                            BusinessProfileId = 1,
                            DateCreated = new DateTime(2025, 2, 23, 14, 10, 29, 345, DateTimeKind.Local).AddTicks(7875),
                            IsRead = false,
                            Message = "Kampanya güncellendi.",
                            NotificationType = 3,
                            UserId = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3"
                        },
                        new
                        {
                            NotificationId = 4,
                            DateCreated = new DateTime(2025, 2, 25, 14, 10, 29, 345, DateTimeKind.Local).AddTicks(7878),
                            IsRead = true,
                            Message = "Yeni mesajınız var.",
                            NotificationType = 4,
                            UserId = "d04b2879-cff4-4d92-8e3f-97acdc6c0e42"
                        },
                        new
                        {
                            NotificationId = 5,
                            DateCreated = new DateTime(2025, 2, 21, 14, 10, 29, 345, DateTimeKind.Local).AddTicks(7881),
                            IsRead = false,
                            Message = "Profiliniz güncellendi.",
                            NotificationType = 5,
                            UserId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.User.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReviewId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            Comment = "Harika ürün, çok memnun kaldım!",
                            DateCreated = new DateTime(2025, 2, 18, 14, 10, 29, 345, DateTimeKind.Local).AddTicks(7965),
                            ProductId = 101,
                            Rating = 5,
                            UserId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b"
                        },
                        new
                        {
                            ReviewId = 2,
                            Comment = "Fiyat/performans açısından iyi bir ürün.",
                            DateCreated = new DateTime(2025, 2, 21, 14, 10, 29, 345, DateTimeKind.Local).AddTicks(7968),
                            ProductId = 101,
                            Rating = 4,
                            UserId = "f8c9debe-935b-432a-b8a2-7c417f7767b1"
                        },
                        new
                        {
                            ReviewId = 3,
                            Comment = "Ürün kaliteli ama biraz pahalı.",
                            DateCreated = new DateTime(2025, 2, 23, 14, 10, 29, 345, DateTimeKind.Local).AddTicks(7971),
                            ProductId = 102,
                            Rating = 4,
                            UserId = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.User.UserFollow", b =>
                {
                    b.Property<string>("FollowerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FollowedId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FollowerId", "FollowedId");

                    b.HasIndex("FollowedId");

                    b.ToTable("UserFollows");

                    b.HasData(
                        new
                        {
                            FollowerId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b",
                            FollowedId = "f8c9debe-935b-432a-b8a2-7c417f7767b1"
                        },
                        new
                        {
                            FollowerId = "f8c9debe-935b-432a-b8a2-7c417f7767b1",
                            FollowedId = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3"
                        },
                        new
                        {
                            FollowerId = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3",
                            FollowedId = "d04b2879-cff4-4d92-8e3f-97acdc6c0e42"
                        },
                        new
                        {
                            FollowerId = "d04b2879-cff4-4d92-8e3f-97acdc6c0e42",
                            FollowedId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b"
                        });
                });

            modelBuilder.Entity("Commercium.Entity.User.UserProfileCustomization", b =>
                {
                    b.Property<int>("UserProfileCustomizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserProfileCustomizationId"));

                    b.Property<string>("CustomBackgroundImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomProfileImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserProfileCustomizationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfileCustomizations");

                    b.HasData(
                        new
                        {
                            UserProfileCustomizationId = 1,
                            CustomBackgroundImage = "https://example.com/background1.jpg",
                            CustomDescription = "Ahmet'in özel profil açıklaması.",
                            CustomProfileImage = "https://example.com/profile1.jpg",
                            UserId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b"
                        },
                        new
                        {
                            UserProfileCustomizationId = 2,
                            CustomBackgroundImage = "https://example.com/background2.jpg",
                            CustomDescription = "Mehmet'in özelleştirilmiş profili.",
                            CustomProfileImage = "https://example.com/profile2.jpg",
                            UserId = "f8c9debe-935b-432a-b8a2-7c417f7767b1"
                        },
                        new
                        {
                            UserProfileCustomizationId = 3,
                            CustomBackgroundImage = "https://example.com/background3.jpg",
                            CustomDescription = "Ayşe'nin özel açıklaması.",
                            CustomProfileImage = "https://example.com/profile3.jpg",
                            UserId = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3"
                        },
                        new
                        {
                            UserProfileCustomizationId = 4,
                            CustomBackgroundImage = "https://example.com/background4.jpg",
                            CustomDescription = "Ali'nin özel açıklaması.",
                            CustomProfileImage = "https://example.com/profile4.jpg",
                            UserId = "d04b2879-cff4-4d92-8e3f-97acdc6c0e42"
                        });
                });

            modelBuilder.Entity("ConversationMessage", b =>
                {
                    b.Property<int>("ConversationsConversationId")
                        .HasColumnType("int");

                    b.Property<int>("MessagesMessageId")
                        .HasColumnType("int");

                    b.HasKey("ConversationsConversationId", "MessagesMessageId");

                    b.HasIndex("MessagesMessageId");

                    b.ToTable("ConversationMessage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1e5c4d9b-cd72-41f1-b123-57b66ac50f3b",
                            RoleId = "1e01f984-8836-4e4b-902a-d60fa23b1833"
                        },
                        new
                        {
                            UserId = "f8c9debe-935b-432a-b8a2-7c417f7767b1",
                            RoleId = "d4b8c6bc-0182-4c29-8c88-8e68bc8a7b2b"
                        },
                        new
                        {
                            UserId = "8d1a2c8f-bd5f-48c7-a6fe-bf1a31fe63d3",
                            RoleId = "fa5c0d5b-8b9b-4377-a2ba-d5765a8ed25c"
                        },
                        new
                        {
                            UserId = "d04b2879-cff4-4d92-8e3f-97acdc6c0e42",
                            RoleId = "ab5cd8c9-8f8e-48b2-83c1-b96e5f98413a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Commercium.Entity.Businness.BusinessProfile", b =>
                {
                    b.HasOne("Commercium.Entity.User.Account.AppUser", "Owner")
                        .WithMany("BusinessProfiles")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Commercium.Entity.Businness.BusinessProfileCustomization", b =>
                {
                    b.HasOne("Commercium.Entity.Businness.BusinessProfile", "BusinessProfile")
                        .WithMany()
                        .HasForeignKey("BusinessProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessProfile");
                });

            modelBuilder.Entity("Commercium.Entity.Businness.BusinessProfileTag", b =>
                {
                    b.HasOne("Commercium.Entity.Businness.BusinessProfile", "BusinessProfile")
                        .WithMany("BusinessProfileTags")
                        .HasForeignKey("BusinessProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commercium.Entity.Tags.Tag", "Tag")
                        .WithMany("BusinessProfileTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessProfile");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Commercium.Entity.Businness.Campaign", b =>
                {
                    b.HasOne("Commercium.Entity.Businness.BusinessProfile", "BusinessProfile")
                        .WithMany()
                        .HasForeignKey("BusinessProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessProfile");
                });

            modelBuilder.Entity("Commercium.Entity.Businness.Service", b =>
                {
                    b.HasOne("Commercium.Entity.Businness.BusinessProfile", "BusinessProfile")
                        .WithMany("Services")
                        .HasForeignKey("BusinessProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commercium.Entity.User.Favorite", "Favorite")
                        .WithMany()
                        .HasForeignKey("FavoriteId1");

                    b.Navigation("BusinessProfile");

                    b.Navigation("Favorite");
                });

            modelBuilder.Entity("Commercium.Entity.Product", b =>
                {
                    b.HasOne("Commercium.Entity.Businness.BusinessProfile", "BusinessProfile")
                        .WithMany("Products")
                        .HasForeignKey("BusinessProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commercium.Entity.Businness.Campaign", null)
                        .WithMany("Products")
                        .HasForeignKey("CampaignId");

                    b.HasOne("Commercium.Entity.User.Favorite", "Favorite")
                        .WithMany()
                        .HasForeignKey("FavoriteId1");

                    b.Navigation("BusinessProfile");

                    b.Navigation("Favorite");
                });

            modelBuilder.Entity("Commercium.Entity.ProductCategory", b =>
                {
                    b.HasOne("Commercium.Entity.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commercium.Entity.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Commercium.Entity.Search.SearchHistory", b =>
                {
                    b.HasOne("Commercium.Entity.User.Account.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Commercium.Entity.Search.SearchResult", b =>
                {
                    b.HasOne("Commercium.Entity.Businness.BusinessProfile", "BusinessProfile")
                        .WithMany()
                        .HasForeignKey("BusinessProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commercium.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Commercium.Entity.Businness.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.Navigation("BusinessProfile");

                    b.Navigation("Product");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Commercium.Entity.Tags.ProductTag", b =>
                {
                    b.HasOne("Commercium.Entity.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commercium.Entity.Tags.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Commercium.Entity.Tags.ServiceTag", b =>
                {
                    b.HasOne("Commercium.Entity.Businness.Service", "Service")
                        .WithMany("ServiceTags")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commercium.Entity.Tags.Tag", "Tag")
                        .WithMany("ServiceTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Commercium.Entity.User.ActivityLog", b =>
                {
                    b.HasOne("Commercium.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Commercium.Entity.Businness.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Commercium.Entity.User.Account.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Commercium.Entity.User.Conversation", b =>
                {
                    b.HasOne("Commercium.Entity.User.Account.AppUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Commercium.Entity.User.Account.AppUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Commercium.Entity.User.Favorite", b =>
                {
                    b.HasOne("Commercium.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Commercium.Entity.Businness.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Commercium.Entity.User.Account.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Commercium.Entity.User.Message", b =>
                {
                    b.HasOne("Commercium.Entity.User.Account.AppUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Commercium.Entity.User.Account.AppUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Commercium.Entity.User.Notification", b =>
                {
                    b.HasOne("Commercium.Entity.Businness.BusinessProfile", "BusinessProfile")
                        .WithMany("Notifications")
                        .HasForeignKey("BusinessProfileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Commercium.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Commercium.Entity.Businness.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("Commercium.Entity.User.Account.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessProfile");

                    b.Navigation("Product");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Commercium.Entity.User.Review", b =>
                {
                    b.HasOne("Commercium.Entity.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId");

                    b.HasOne("Commercium.Entity.Businness.Service", "Service")
                        .WithMany("Reviews")
                        .HasForeignKey("ServiceId");

                    b.HasOne("Commercium.Entity.User.Account.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Commercium.Entity.User.UserFollow", b =>
                {
                    b.HasOne("Commercium.Entity.User.Account.AppUser", "Followed")
                        .WithMany("FollowedBy")
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Commercium.Entity.User.Account.AppUser", "Follower")
                        .WithMany("Follows")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Commercium.Entity.User.UserProfileCustomization", b =>
                {
                    b.HasOne("Commercium.Entity.User.Account.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConversationMessage", b =>
                {
                    b.HasOne("Commercium.Entity.User.Conversation", null)
                        .WithMany()
                        .HasForeignKey("ConversationsConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commercium.Entity.User.Message", null)
                        .WithMany()
                        .HasForeignKey("MessagesMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Commercium.Entity.User.Account.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Commercium.Entity.User.Account.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Commercium.Entity.User.Account.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Commercium.Entity.User.Account.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commercium.Entity.User.Account.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Commercium.Entity.User.Account.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Commercium.Entity.Businness.BusinessProfile", b =>
                {
                    b.Navigation("BusinessProfileTags");

                    b.Navigation("Notifications");

                    b.Navigation("Products");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Commercium.Entity.Businness.Campaign", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Commercium.Entity.Businness.Service", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("ServiceTags");
                });

            modelBuilder.Entity("Commercium.Entity.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Commercium.Entity.Product", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("ProductTags");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Commercium.Entity.Tags.Tag", b =>
                {
                    b.Navigation("BusinessProfileTags");

                    b.Navigation("ProductTags");

                    b.Navigation("ServiceTags");
                });

            modelBuilder.Entity("Commercium.Entity.User.Account.AppUser", b =>
                {
                    b.Navigation("BusinessProfiles");

                    b.Navigation("FollowedBy");

                    b.Navigation("Follows");
                });
#pragma warning restore 612, 618
        }
    }
}
